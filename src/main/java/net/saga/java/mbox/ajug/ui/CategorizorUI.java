/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.saga.java.mbox.ajug.ui;

import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import net.saga.java.mbox.ajug.persistence.HibernateModule;
import net.saga.java.mbox.ajug.vo.Classification;
import net.saga.java.mbox.ajug.vo.EmailMessage;

/**
 *
 * @author summers
 */
public class CategorizorUI extends javax.swing.JPanel {

    private HibernateModule hibernate;

    /**
     * Creates new form CategorizorUI
     */
    public CategorizorUI() {
        initComponents();
    }

    public CategorizorUI(HibernateModule hibernate) {
        initComponents();
        this.hibernate = hibernate;

        addCategoryButton.addActionListener((event) -> {
            String newCategory = JOptionPane.showInputDialog("Add Category");
            if (!newCategory.isEmpty()) {
                hibernate.addCategory(newCategory);
                loadCategories();
            }
        });

        messagesList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (messagesList.getSelectedIndices().length == 1) {
                    messageDisplay.setText(messagesList.getSelectedValue().getBody());
                    if (messagesList.getSelectedValue().getClassification() != null) {
                        selectCategory(messagesList.getSelectedValue().getClassification());
                    } else {
                        categoriesList.clearSelection();;
                        categoriesList.repaint();
                    }
                }
            }

        });

        categoriesList.addListSelectionListener((ignore) -> {
            if (messagesList.getSelectedIndex() != -1) {
                messagesList.getSelectedValue().setClassification(categoriesList.getSelectedValue());
                hibernate.updateEmail(messagesList.getSelectedValue());
            }
        });

        loadCategories();
        loadMessages();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        addCategoryButton = new javax.swing.JButton();
        testCategorizer = new javax.swing.JButton();
        trainCategories = new javax.swing.JButton();
        exportTrainingButton = new javax.swing.JButton();
        categoryMessagePane = new javax.swing.JSplitPane();
        messageDetailSplit = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        messagesList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        messageDisplay = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        categoriesList = new javax.swing.JList<>();

        addCategoryButton.setText("Add Category");

        testCategorizer.setText("Test Categorizer");

        trainCategories.setText("Train Categories");
        trainCategories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainCategoriesActionPerformed(evt);
            }
        });

        exportTrainingButton.setText("Export Categories");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addCategoryButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trainCategories)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testCategorizer)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exportTrainingButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCategoryButton)
                    .addComponent(testCategorizer)
                    .addComponent(trainCategories)
                    .addComponent(exportTrainingButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        messageDetailSplit.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        messagesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(messagesList);

        messageDetailSplit.setTopComponent(jScrollPane2);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        messageDisplay.setColumns(20);
        messageDisplay.setRows(5);
        jScrollPane3.setViewportView(messageDisplay);

        messageDetailSplit.setRightComponent(jScrollPane3);

        categoryMessagePane.setRightComponent(messageDetailSplit);

        categoriesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(categoriesList);

        categoryMessagePane.setLeftComponent(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(categoryMessagePane, javax.swing.GroupLayout.DEFAULT_SIZE, 961, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(categoryMessagePane)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void trainCategoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainCategoriesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trainCategoriesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCategoryButton;
    private javax.swing.JList<Classification> categoriesList;
    private javax.swing.JSplitPane categoryMessagePane;
    private javax.swing.JButton exportTrainingButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane messageDetailSplit;
    private javax.swing.JTextArea messageDisplay;
    private javax.swing.JList<EmailMessage> messagesList;
    private javax.swing.JButton testCategorizer;
    private javax.swing.JButton trainCategories;
    // End of variables declaration//GEN-END:variables

    private void loadCategories() {
        DefaultListModel<Classification> categoriesModel = new DefaultListModel<>();
        List<Classification> categories = hibernate.getCategories();
        categories.forEach((cat) -> categoriesModel.addElement(cat));
        SwingUtilities.invokeLater(() -> {
            categoriesList.setModel(categoriesModel);
            repaint();
        });

    }

    private void loadMessages() {
        DefaultListModel<EmailMessage> emailSubjectModel = new DefaultListModel<>();
        List<EmailMessage> messages = hibernate.getMails();
        messages.forEach((message) -> emailSubjectModel.addElement(message));
        SwingUtilities.invokeLater(() -> {
            messagesList.setModel(emailSubjectModel);
            repaint();
        });
    }

    private void selectCategory(Classification classification) {
        ListModel<Classification> model = categoriesList.getModel();
        for (int i=0; i < model.getSize(); i++) {
            if (model.getElementAt(i).getClassification().equals(classification.getClassification())) {
                categoriesList.setSelectedIndex(i);
                break;
            }
        }
    }
}
